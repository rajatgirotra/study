// Garbage collection
Programmers know about the importance of initialization, but often
forget the importance of cleanup. After all, who needs to clean up an int?
But with libraries, simply letting go of an object once youre done with it
is not always safe. Of course, Java has the garbage collector to reclaim the
memory of objects that are no longer used. Now consider an unusual case.
Suppose your object allocates special memory without using new. The
garbage collector knows only how to release memory allocated with new,
so it wont know how to release the objects special memory. To handle
this case, Java provides a method called finalize( ) that you can define
for your class. Heres how its supposed to work. When the garbage
collector is ready to release the storage used for your object, it will first
call finalize( ), and only on the next garbage-collection pass will it
reclaim the objects memory. So if you choose to use finalize( ), it gives
you the ability to perform some important cleanup at the time of garbage
collection. 

This is a potential programming pitfall because some programmers,
especially C++ programmers, might initially mistake finalize( ) for the
destructor in C++, which is a function that is always called when an object
is destroyed. But it is important to distinguish between C++ and Java
here, because in C++ objects always get destroyed (in a bug-free
program), whereas in Java objects do not always get garbage-collected.
Or, put another way:

1. Your objects might not get garbage-collected.
2. Garbage collection is not destruction.

If you remember this, you will stay out of trouble. What it means is that if
there is some activity that must be performed before you no longer need
an object, you must perform that activity yourself. Java has no destructor
or similar concept, so you must create an ordinary method to perform this
cleanup. For example, suppose in the process of creating your object it
draws itself on the screen. If you dont explicitly erase its image from the
screen, it might never get cleaned up. If you put some kind of erasing
functionality inside finalize( ), then if an object is garbage-collected and
finalize( ) is called (theres no guarantee this will happen), then the
image will first be removed from the screen, but if it isnt, the image will
remain.

You might find that the storage for an object never gets released because
your program never nears the point of running out of storage. If your
program completes and the garbage collector never gets around to
releasing the storage for any of your objects, that storage will be returned
to the operating system en masse as the program exits. This is a good
thing, because garbage collection has some overhead, and if you never do
it you never incur that expense.

So, if you should not use finalize( ) as a general-purpose cleanup
method, what good is it?

A third point to remember is:

3. Garbage collection is only about memory.

That is, the sole reason for the existence of the garbage collector is to
recover memory that your program is no longer using. So any activity that
is associated with garbage collection, most notably your finalize( )
method, must also be only about memory and its deallocation.

Does this mean that if your object contains other objects finalize( )
should explicitly release those objects? Well, nothe garbage collector
takes care of the release of all object memory regardless of how the object
is created. It turns out that the need for finalize( ) is limited to special
cases, in which your object can allocate some storage in some way other
than creating an object. But, you might observe, everything in Java is an
object so how can this be?

It would seem that finalize( ) is in place because of the possibility that
youll do something C-like by allocating memory using a mechanism other
than the normal one in Java. This can happen primarily through native
methods, which are a way to call non-Java code from Java. (Native
methods are covered in Appendix B in the electronic 2nd edition of this
book, available on this books CD ROM and at www.BruceEckel.com.) C
and C++ are the only languages currently supported by native methods,
but since they can call subprograms in other languages, you can effectively
call anything. Inside the non-Java code, Cs malloc( ) family of functions
might be called to allocate storage, and unless you call free( ) that storage
will not be released, causing a memory leak. Of course, free( ) is a C and
C++ function, so youd need to call it in a native method inside your
finalize( ).

After reading this, you probably get the idea that you wont use
finalize( ) much4. Youre correct; it is not the appropriate place for
normal cleanup to occur. So where should normal cleanup be performed?

To clean up an object, the user of that object must call a cleanup method
at the point the cleanup is desired. This sounds pretty straightforward,
but it collides a bit with the C++ concept of the destructor. In C++, all
objects are destroyed. Or rather, all objects should be destroyed. If the
C++ object is created as a local (i.e., on the stacknot possible in Java),
then the destruction happens at the closing curly brace of the scope in
which the object was created. If the object was created using new (like in
Java) the destructor is called when the programmer calls the C++
operator delete (which doesnt exist in Java). If the C++ programmer
forgets to call delete, the destructor is never called and you have a
memory leak, plus the other parts of the object never get cleaned up. This
kind of bug can be very difficult to track down, and is one of the
compelling reasons to move from C++ to Java.

In contrast, Java doesnt allow you to create local objectsyou must
always use new. But in Java, theres no delete to call to release the
object since the garbage collector releases the storage for you. So from a
simplistic standpoint you could say that because of garbage collection,
Java has no destructor. Youll see as this book progresses, however, that
the presence of a garbage collector does not remove the need for or utility
of destructors. (And you should never call finalize( ) directly, so thats
not an appropriate avenue for a solution.) If you want some kind of
cleanup performed other than storage release you must still explicitly call
an appropriate method in Java, which is the equivalent of a C++
destructor without the convenience.

Remember that neither garbage collection nor finalization is guaranteed.
If the Java Virtual Machine (JVM) isnt close to running out of memory,
then it might not waste time recovering memory through garbage
collection.

The termination condition
In general, you cant rely on finalize( ) being called, and you must create
separate cleanup methods and call them explicitly. So it appears that
finalize( ) is only useful for obscure memory cleanup that most
programmers will never use. However, there is a very interesting use of
finalize( ) which does not rely on it being called every time. This is the
verification of the termination condition5 of an object.

At the point that youre no longer interested in an objectwhen its ready
to be cleaned upthat object should be in a state whereby its memory can
be safely released. For example, if the object represents an open file, that
file should be closed by the programmer before the object is garbagecollected.
If any portions of the object are not properly cleaned up, then
you have a bug in your program that could be very difficult to find. The
value of finalize( ) is that it can be used to eventually discover this
condition, even if it isnt always called. If one of the finalizations happens
to reveal the bug, then you discover the problem, which is all you really
care about.

Heres a simple example of how you might use it:
//: c04:TerminationCondition.java
// Using finalize() to detect an object that
// hasn't been properly cleaned up.
import com.bruceeckel.simpletest.*;
class Book {
boolean checkedOut = false;
Book(boolean checkOut) {
checkedOut = checkOut;
}
void checkIn() {
checkedOut = false;
}
public void finalize() {
if(checkedOut)
System.out.println("Error: checked out");
}
}
public class TerminationCondition {
static Test monitor = new Test();
public static void main(String[] args) {
Book novel = new Book(true);
// Proper cleanup:
novel.checkIn();
// Drop the reference, forget to clean up:
new Book(true);
// Force garbage collection & finalization:
System.gc();
monitor.expect(new String[] {
"Error: checked out"}, Test.WAIT);
}
} ///:~
The termination condition is that all Book objects are supposed to be
checked in before they are garbage-collected, but in main( ) a
programmer error doesnt check in one of the books. Without finalize( )
to verify the termination condition, this could be a difficult bug to find.

Note that System.gc( ) is used to force finalization (and you should do
this during program development to speed debugging). But even if it isnt,
its highly probable that the errant Book will eventually be discovered
through repeated executions of the program (assuming the program
allocates enough storage to cause the garbage collector to execute).


