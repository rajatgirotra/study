When the data is static the same thing happens; if its a primitive and you
dont initialize it, it gets the standard primitive initial values. If its a
reference to an object, its null unless you create a new object and attach
your reference to it. 
If you want to place initialization at the point of definition, it looks the
same as for non-statics. Theres only a single piece of storage for a static,
regardless of how many objects are created. But the question arises of
when the static storage gets initialized.

Its helpful to summarize the process of creating an object. Consider a
class called Dog:

1. The first time an object of type Dog is created (the constructor is
actually a static method), or the first time a static method or
static field of class Dog is accessed, the Java interpreter must
locate Dog.class, which it does by searching through the
classpath. 

2. As Dog.class is loaded (creating a Class object, which youll learn
about later), all of its static initializers are run. Thus, static
initialization takes place only once, as the Class object is loaded for
the first time. 

3. When you create a new Dog( ), the construction process for a
Dog object first allocates enough storage for a Dog object on the
heap. 

4. This storage is wiped to zero, automatically setting all the
primitives in that Dog object to their default values (zero for
numbers and the equivalent for boolean and char) and the
references to null. 

5. Any initializations that occur at the point of field definition are
executed. 

6. Constructors are executed. As you shall see in Chapter 6, this might
actually involve a fair amount of activity, especially when
inheritance is involved.

