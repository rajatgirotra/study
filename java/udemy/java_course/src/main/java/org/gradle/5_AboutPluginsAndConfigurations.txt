A gradle project can have a root project and multiple sub projects. With this setting, gradle needs a settings.gradle file at the root of your source tree; which defines the name of your root project and the various sub projects. Each sub project in turn has its own build.gradle script.

How gradle runs:
1) Read the settings.gradle file and create a Settings object. Initialize the gradle build.
2) Read the individual build.gradle file for every sub-project and create separate Project instances for each sub-project. Understand the tasks and create a task graph
3) See which tasks needs to be executed and runs those. Tasks can also be run in parallel.

A plugin can add:
1) tasks to a project.
2) new DSL blocks
3) properties and methods.
4) configurations
5) other things..

Tasks can be either aggregate/lifecycle tasks or actionable tasks. aggregated tasks dont do anything. they are only used by other plugins to apply some actionable tasks to these actionable tasks.

Each task can have input and output.

Gradle by default applies a plugin called "base". The "base" plugin only adds aggregated tasks.
Create a build.gradle which applies the "base" plugin; and run "gradle tasks --all". You will only see a few help tasks and build setup tasks
Then apply the "java" plugin and run "gradle tasks --all" again and observe the difference. Note that tasks can be grouped togther into groups like "help tasks", "Build setup tasks", "Verification Tasks", "Other tasks" etc.

Configurations
=============
Configurations are used to define the scope of the dependencies of your project. scope means when the dependencies should be added to classpath, during compile, during runtime, during testCompile, during annoationProcessing etc etc.

Also configurations have three types:'
1) declared configuration: Just declare the dependencies of your project. It doesnt tell anything about when the dependency is needed.
2) resolveable configuration: Where you define when a dependency is needed. consumers of a java library will typically define it.
3) consumable configuration: The producers define what dependencies are consumable.
Dont worry, we will study of all this in detail shortly.

About plugins
============
It is difficult to document everything a plugin provides so I will write important parts so I can remember.

base plugin
-----------
Just adds aggregate/lifecycle tasks like:
clean
check
assemble
build (builds everything, including running all tests, producting artifact and generating documentation).
build<Configuration>: execute any task that is required to create any artifact attached to the configuration
clean<Task>

Other things you can define in base plugin
base {
  archiveName (default is $Project.name)
  libsDirectory (default is layout.buildDirectory.dir("libs")) # location of jars.
  distsDirectory (default is layout.buildDirectory.dir("distributions")) # location of other non-jar distribution files.
}


java plugin
-----------
Applies the "base" plugin by itself. Important tasks in java plugin:

compileJava
processResources
classes (An aggrgate task which dependsOn compile and and processResources). A lot of plugin depend on the classes task.

compileTestJava (depends on classes)
processTestResources
testClasses (depends on compileTestJava, processTestResources)

jar (dependsOn classes)
test (dependsOn testClasses)

clean
clean<TaskName> - Clean the outputs of a task

compile<SourceSet>Java (in src/main/java and src/test/java, "main" and "test" are source sets).

assemble.dependsOn(jar) --> means you can run "assemble" and it will run everything till jar
check.dependsOn(test) --> means you can "check" task and it will run all tests.
build.dependsOn(check, assemble) --> means you can run "build" task and it will build sources, tests and also create jar
build<ConfigName> --> Try and find out

you can use the "sourceSets" DSL block to modify or add new source sets. Have a look at SourceSet API and SourceDirectorySet API.

sourceSets {
  main { # this is a SourceSet
    java {  # this is a SourceDirectorySet
        srcDirs = ...
        excludes = ...
    }
  }

  test {
     ...
  }
}

Configurations added
====================
implementation
compileOnly
compileClasspath extends compileOnly, implementation # this can be resolved.
annotationProcessor
runtimeOnly
runtimeClasspath extends runtimeOnly, implementation # this can be resolved
testImplementation extends implementation
testCompileOnly
testCompileClasspath extends testCompileClasspath, testCompileOnly
testRuntimeOnly extends runtimeOnly
testRuntimeClasspath extends testRuntimeOnly, testImplementation
