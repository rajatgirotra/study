Different entities in the Websphere MQ

There are 12 different types of objects that can be configured in Websphere MQ
The most important ones are:

1) Q manager
2) Queue's (Various types)
3) Channels
4) Topics

Objects names are 48 characters long (20 characters for channels) and are case sensitive. So a Q named "q.abc" and a Q called "Q.ABC" are different.
Each object has a set of attributes.

Q Manager
---------

The Q Manager is the most important object. It manages the processing of data, storaging, forwarding, failure recovery etc..
Most other websphere objects are owned by a Q manager. This is the first object that you will create when you install IBM MQ.
The attributes  associated with a Q manager define how it will behave.


2) Queue's
----------

There are many different types of Q's. Queues are used to store the messages or can just be a pointer (or alias) to another queue or topic.
   Local Queue
   -----------
   A local q is the only place where the messages are physically stored. All other queue's simply point to a local queue in someway or the other.
   
   Alias Queue
   -----------
   Just another name for a local queue. Different applications can use different alias queue names all of which point to the same local queue.
   An alias queue can also be used as a pointer to a topic for publish/subscribe applications.
   
   Remote Queue
   ------------
   A remote queue is another type of pointer which points to a queue on another queue manager. When an application connects to a remote queue,
   the queue manager to which the application is connected, ensures that the messages are stored locally in preparation for sending to another
   queue manager. Applications cannot read messages from remote queues.
   
   Model Queue
   -----------
   This is just a template for creating a new queue dynamically. You can create it dynamically when your program runs, and can reply to messages.
   and then the queue is automatically deleted when the application ends.`	
   
   Dynamic Queue
   -------------
   Created dynamically while your program is running. These are actually real local queues. Cannot be created explicitly using administration interfaces.
   
   Transmission Queue
   -----------------
   A queue created with the "USAGE(XMITQ)" attribute configured. This is basically a staging point where all messages destined for a particular remote queue are stored.
   A local queue manager will have one individual transmission queue for each remote queue manager to which it connects directly. And all messages destined for that remote Q manager
   are stored on that queue. These queues are actually transparent to the application and they dont need to know about this. Transmission queue is a local queue.
   
   Initiation Queue
   ----------------
   Related to triggering concept. A local queue to which the Q manager writes when certain conditions on another local queue are met.
   
   Dead Letter Queue
   -----------------
   A local queue which is written when the Q mgr cannot deliver a message across a channel. For example, in the following cases, this Q is written by the local Q manager
      a) The destination queue is full
	  b) The destination queue does not exist.
	  c) The sender does not have permission to write to the destination queue.
	  d) Message puts has been disabled by the receiver.
	  e) The message is too large.
   
   Event Queue
   -----------
   The Q manager generated certain messages when some events take place. For example, a local queue is nearly full, application is not authorised.
   In such cases, events generated by Q manager is put to the event queue. Eg: SYSTEM.ADMIN.QMGR.EVENT or SYSTEM.ADMIN.CHANNEL.EVENT
   
   
   
 Topics
 ------
 
 Just a string to identify a message in a publish/subscribe model. The Q manager will check the topic. and then check which all subcribers are registered.
 and then send the message to all those subscribers.
 
 
 
 Channels
 --------
 
 Just a logical communication link. These are of two types.
 
 a) Message Channels Agents - This is a program which basically connects two Q managers together. Reads from the transimission queue and puts the messages on the commuication link and
    then reads from the communication link and puts it into the remote queue.
	A channel definition on one Q manager has to be matched with the channel definition on the other Q manager with the appropiate subtypes. For example, on One Q manager it is the 
	sender, and on the other it is the receiver. WebSphere MQ was designed to support several network protocols for the MCAs, and these other protocols can still be used,
	but it is now rare to find anything other than TCP/IP. So basically MQ also work on top of TCP/IP.
	
 b) MQI Channels - A message queue interface channel connects an MQ client to a Q manager across a network.