Write a lisp function to count words in the current buffer.

C-x C-e : will run the lisp function and show result in minibuffer
C-j: will run the lisp function and show result in the same buffer

Emacs Lisp:

Is an interpreted and procedural language. Everything is a function having format

(function_name argument_one, argument_two..)


Eg:
(+ 2 4) will give 6
(>= 4 2) will return a true value.

We have
1)    Integers
2)    Real numbers
3)    Characters, preceded by ?. Eg x is ?x and C-a is ?\C-a, Esc, Newline and Tab are \e, \n, \t respectively
4)    Strings are always double quoted “abc” etc
5)    Boolean : t = true value, nil = false value
6)    Symbols : anything that has a name in lisp. Preceded by a single quote. Eg: goto-line is name function. ‘goto-line represents a symbol.


Setq function – very simple lisp function use to set the value of one or more variables

(setq thisVar thisValue
      thatVar thatValue
      thisOtherVar thisOtherVal)

return value of setq will be thisOtherVal à ie the return value of the last statement.


How to write a lisp function
;;simple function to count the number of words in a buffer.
;;defun is itself a function which defines a new function. returns the name of the defined function as a symbol
;;followed by function name and arguments in brackets. Here no arguments are needed. You can make
;;arguments optional by precding them with keyword &optional. If an argument is not specified, it gets the value of nil.

(defun count-words-buffer()
    "Count the number of words in the current buffer;
    print a message in the minibuffer with the result."
    (interactive)
    (let ((count 0))
         (save-excursion
         (goto-char (point-min))
         (while (< (point) (point-max))
             (forward-word 1)
             (setq count (1+ count)))
        (message "buffer contains %d words." count))))


;;the let is a construct to define multiple variables and their values, followed by a statement block which is just a sequence of function calls and

Values

(let ( (var1 val1) (var2 val2) (var3 val3)  ) statement-block) à the scope of the variables is within the statement_block

 

(save-excursion is used to tell emacs that the position of the cursor is going to change very rapidly as you issue commands to calculate the words in
Buffer. So emacs should remember the current cursor position and go back to it after the save-excursion statement block is executed.
(save-excursion statement_block)
(goto-char (point-min)) à gto-char is a function which take one argument. The argument is the return value of the point-min function.
(while condition statement_block) à condition is (< (point) (point-max))
(forward-word 1) à trivial , just like M-f
(setq count (1+ count)) à same as (setq count (+  1 count)), just that 1+ is a function for a shorthand notation of (+ 1 ..)
(finally write the message in the minibuffer)

You write the above function in a scratch buffer which is by default in Lisp Interaction mode.
After writing this go to the last parenthesis of the function and hit

C-j (ie evaluate expression) in Lisp interaction mode. It prints the name of the function in the next line as that is the return value of the function

So ur function  is now defined.

Once again just add brackets around the function name and call C-j again. This time it should calculate the words and print in the minibuffer.
 

Next do M-x count-words-buffer which will show u no match, because you did not register your function with emacs to be run interactively.

You do this using the interactive function

(interactive “prompt_string”)- The prompt string is newline(\n) separated string of options to be displayed in the minibuffer while prompting for input

 

Eg:

(defun my_replace_string(from to)

    (interactive "sReplace string: \nsReplace string %s with: ") à s means string, b means buffer, f means file and many more. Do C-h f interactive for more details

…)

 

As you have already seen, everything in lisp is a function, there are no operators, even +,-,*,% etc are not operators but functions. See basic lisp functions below

 

Arithmetic: +, -, *, /, %, 1+, 1-, max, min

Comparison: >, <, >=, <=, /=, =, equal, (use = for numbers and chars, equal for strings and others)

Logic: and, or, not

 

Statement blocks: you have already seen that

Let, save-excursion, while etc have statement blocks. The simplest form of statement block is progn

(progn statement_block)        

 

let has many forms

1)    let ( (var1 val1) (var2 val2) )

2)    let ( var1 (var2 val2) var3 val4 ) à var1, var3 and var4 will get value nil by default

3)    let* ( (size 10) (biggersize (+ 10 size))) à ie where one argument depends on the next

 

best is to use let* always.

 

The if and cond statements

If condition is slightly strange. If condition evaluates to true you can only run one statement in the if block.

(if condition true_case false_block)

 

(defun pluralize(word count)
    (if (= count 1)
        word
    (concat word “s”)))


(defun smart-pluralize(word count &optional plural)
    (if (= count 1)
        word
        (if (null plural) ;;check if plural is given a value
            (concat word "s")
            plural)))

cond is like switch statement

(defun how-many(count)
    (cond
        ((zerop count) "no")
        ((= 1 count) "one")
        ((= 2 count) "two")
        (t "many")))
