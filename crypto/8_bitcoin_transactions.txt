Lets understand bitcoin transactions.
====================================

Let's say you want to send 3 BTC to someone. Normally when you want to pay $3 to someone, you just take out, say 3 $1 bills from your wallet and hand over to your friend. You are really not concerned who exactly gave you those $3. However that's not the case with BTC. in bitcoin blockchain, each transaction records where the bitcoin in your wallet comes from. So lets say you have to pay 3 BTC to someone, and you have enough BTC in your bitcoin wallet. Lets say there are 3.5 BTC in your wallet which are unspent and they came from three transactions, TX0, TX1, TX2.

So your wallet will create a new transaction (we will come to the transaction id in a minute). this transaction will have as

1) Input --> the three transactions TX0, TX1, TX2 which total 3.5 BTC.
3) Output --> the output transactions lets call it TX3.

Now once this transaction is mined by a miner, they will realize that the total value of TX0 + TX1 + TX2 is 3.5 BTC, but the output value is only 3 BTC.
So the difference between this (0.5 BTC) is the transaction fee. This is the fee which goes as a reward to the miner. that is why miners are really interested in mining transactions which give them a higher transaction fee.

As an initiator, if you feel 0.5 BTC is a really high transaction fee, you can create another output TX4 to be paid back to your own bitcoin address. This way you can save on the transaction fee.

Now when you create a transaction in your wallet, you can assign some conditions on the Output transactions. This is to ensure that the BTC are really xferred to the intended receipient. These are conditions which must be satisfied by the new owner of the BTC, otherwise the transaction will not be valid. the most general condition that the transaction initiator puts is the PUBLIC-KEY of the new owner. Only if the new owner has the corresponding PRIVATE-KEY will the new owner be allowed to take the transaction.

If you really think, the input transactions would have also included this condition. And you would have proved that you really own the PRIVATE-KEY corresponding to the PUBLIC-KEY provided as a condition in TX0, TX1, TX2. This is what is called the proof-of-work.


COINBASE transaction
===================
You already know that every block has a coinbase transaction as the first transaction in the block. this block does not have any input transactions and only one output which includes a reward + transactional fee for all the transactions in that block. This is for the miner.

Transaction In detail
=====================
See random_BTC_tx.PNG/json. You will see the various fields in a transaction. Lets understand those fields.

txid --> double SHA256 of the traditional serialization format.
hash --> mostly same as txid, but will differ from txid in case of witness transactions. We need to understand what are witness transactions.
vin / vout --> Array describing the input and output of the tx.
size --> size in bytes of this tx.
vin.txid --> txid of the previous tx that passed the rights to us.
vin.vout --> means we are referring to that output in the previous tx.
vin.scriptSig --> means we are providing proof here that indeed we have rights to use the previous output. This is the that proof.
vin.scriptSig consists of two components, the digital signature which signs the hash of the previous output, and the public key of the recipient.


vout[0].value --> the value of the transaction.
vout[0].n --> the number of this output. Each tx can have multiple outputs.
vout[0].scriptPubKey.asm --> conditions on who can use this output. This is where all the crux of tx is. Let's understand it.

"OP_DUP OP_HASH160 c4eb18c2ffb9b5943073b6a7e04c01363a377b00 OP_EQUALVERIFY OP_CHECKSIG"
This words specify operations that the new owner must perform. You should look at this conditions like a stack.

So let say I want to transfer BTC to someone, the tx created will also include these conditions and the new owner must solve the operations in this condition to get rights to the bitcoin and that is what the new owner will put in vin.scriptSig when he creates a new transaction.

The way the conditions are executed is:
1) Combine vin.scriptSg (ie digital signature and public key) with the vout.scriptPubKey of the referenced output.
1) Take the TOS. If it is a string, hold it in a temporary area (as a stack)
2) If It is an Operator, apply the Operator on the strings you have held in the temporary area based  on whether the operator is a Unary or Binary operand.

Stack										Script                
Empty										<sig> <pubkey> OP_DUP OP_HASH160 c4eb18c2ffb9b5943073b6a7e04c01363a377b00 OP_EQUALVERIFY OP_CHECKSIG
<sig> <pubkey>								OP_DUP OP_HASH160 c4eb18c2ffb9b5943073b6a7e04c01363a377b00 OP_EQUALVERIFY OP_CHECKSIG
<sig> <pubkey> <pubkey>						OP_HASH160 c4eb18c2ffb9b5943073b6a7e04c01363a377b00 OP_EQUALVERIFY OP_CHECKSIG
<sig> <pubkey> <pubHashA>					c4eb18c2ffb9b5943073b6a7e04c01363a377b00 OP_EQUALVERIFY OP_CHECKSIG
<sig> <pubkey> <pubHashA> <pubKeyHash>		OP_EQUALVERIFY OP_CHECKSIG
<sig> <pubkey>								OP_CHECKSIG
true/false									empty								


Bitcoin currently creates two different scriptSig/scriptPubKey pairs. The one you saw above was
1) Pay to PubKeyHash (i.e paying to another BTC address)
scriptPubKey: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
scriptSig: <sig> <pubKey>

The other type of contract is
2) Pay-to-Script-Hash (P2SH)
scriptPubKey: OP_HASH160 <scriptHash> OP_EQUAL 
scriptSig: ..signatures... <serialized script>

We will understand PS2H some other day.
