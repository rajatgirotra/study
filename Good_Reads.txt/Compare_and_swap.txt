Please read Spinlocks first

Compare and Swap (or Compare and Exchange)

This is an atomic operation available in almost all procesor instruction sets.
In this instrucion, you compare a memory location with a given value. If the value at that memory location and the given value are same, 
only then a new value is stored at that memory location. Otherwise this instructions is a no-op.
You can return the result as a boolean variable, or you can return the result of a read from that memory location, which can tell if the instruction 
succeeded or was a no-op.

A simple inplementation is like this:
int compare_and_swap(int* reg, int oldval, int newval)
{
  ATOMIC();
  int old_reg_val = *reg;
  if (old_reg_val == oldval)
     *reg = newval;
  END_ATOMIC();
  return old_reg_val;
}
This one returns oldreg_valu always instead of returning a bool. Compare old_reg_val with oldval after the call to CAS.
If they match, CAS was successuful. If not, some other process or thread has already used CAS to change the oldVal.


Many compilers support compare and exchange either with the C11 <stdatomic> functions, or some other non standard compiler extension by 
calling a function written directly in assembly language.

CAS can be used in implementing synchronization primitives such as semaphores and mutexes and also in implementing atomic operations like
atomic read, atomic write etc.
I'll show how an atomic write is implemented

class nonblocking_counter
{
    some_memory_location_ptr* ptr;
	public:
	    int get()
		{
		    ptr->value;
		}
		
		int increment()
		{
		    do
			{
			    int old_value = ptr->value;
				int new_value = old_value + 1;
				
				bool success = CAS(ptr, old_value, new_value)
			} while(!success)
		}
		return old_count;
		}
	};
	
 researchers have found that total system performance can be improved —
    in multiprocessor systems where many threads constantly update some particular shared variable—
 if threads that see their CAS fail use exponential backoff—in other words, wait a little before retrying the CAS.
