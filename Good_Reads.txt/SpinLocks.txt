A spinlock is a locking mechanism in which a thread tries to acquire a lock in a loop. If the lock is not available, it will simple wait in the
loop and try again until the lock is available. We call this as busy waiting.

Spinlocks should be used when you know that you will only be holding the lock for a very short duration of time.
The problem is that threads which are just spinning and waiting to acquire the lock are doing nothing but wating CPU cycles.
Also the longer a thread holds a spinlock, the more is the probability that the CPU schedular will re-schedule another thread,
which will cause indefinite waiting for the spinning threads. All these threads will just keep on wasting their CPU quantums, assuming a Round-robin
implementation.

The reason why spinlocks are still used is that it avoids the processor over-head of a context switch or process-rescheduling.

The other options are

1) to not use spinlock at all. Consider using thread specific data if possible.
2) to block if a lock is not available (ie use wait() & notify() mechanism). 

Implementing spinlocks is also not easy. The processor must support some form of atomic operation to make sure spinlocks are acquired
and released properly. Think what would happen if multiple threads try to acquire the lock simultaneously (race conditions) can occur.

Generally, such implementations are done mostly in assembly language instructions, such as "Atomic test and set".

Sample Implementation of spinlock in x86

locked:
    dd = 0                //lock variable, locked = 1, unlocked = 0

spin_lock:
    mov eax, 1          //Store 1 in some register
	
	xchg   eax, [locked]      //Atomically exchange eax and lock variable
	
	test  eax, eax            // If 0, this means that lock was available, and you just acquired it. this also sets the zero flag to 1.
	                          // if 1, this means that lock was  unavailble, this also sets the zero flag to 0.
							  
	jnz spin_lock         //jump back to the mov instrction of the spin lock and keep trying, JZ means Jump if zero
	
	ret
	

spin_unlock:

    mov eax, 0
	
	xchg eax, [locked]
	
	ret
  
