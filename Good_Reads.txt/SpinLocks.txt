The reason why spinlocks are still used is that it avoids the processor over-head of a context switch or process-rescheduling.
The other options are

1) to not use spinlock at all. Consider using thread specific data if possible.
2) to block if a lock is not available (ie use wait() & notify() mechanism). 
3) to use mutexes.

Implementing spinlocks is also not easy. The processor must support some form of atomic operation to make sure spinlocks are acquired and released properly. Think what would happen if multiple threads try to acquire the lock simultaneously (race conditions) can occur.

Generally, such implementations are done mostly in assembly language instructions, such as "Atomic test and set".

Sample Implementation of spinlock in x86

locked:
    dd = 0                //lock variable, locked = 1, unlocked = 0

spin_lock:
    mov eax, 1          //Store 1 in some register
	
	xchg   eax, [locked]      //Atomically exchange eax and lock variable
	
	test  eax, eax            // The test operation performs a bitwise AND and if the result is zero, it sets the ZF flag. So if lock was available, eax will be 0 and test result will be 0 so, ZF will be set to 1. Also this means that you ahev now acqquired the lock.
	                          // Otherwise the lock was not available and the ZF flag will be not be set.
							  
	jnz spin_lock         //jump back to the mov instrction of the spin lock and keep trying, JNZ means Jump if Zero bit is NOT SET. 
	
	ret
	

spin_unlock:

    mov eax, 0
	
	xchg eax, [locked]
	
	ret
  
