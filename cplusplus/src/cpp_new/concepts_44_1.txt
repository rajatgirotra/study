List of common concepts and their meanings
=========================================

std::ranges::range<Rg>
  Something that can be iterated over. It has begin() and end() functions, like std containers. or range objects returned by range adaptor functions (like std::views::filter, std::views::transform etc). Even std::array/std::string is a range object,but std::string_view is not a range object. std::string_view does not have begin() and end() functions. It has cbegin() and cend() functions. So std::string_view is not a range object. std::ranges::subrange is a range object that is a subrange of another range object. It has begin() and end() functions.

std::ranges::input_range
    Subsumes std::ranges::range. A range that can be iterated over only once. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is an input iterator. std::istream_iterator is an example of an input range. It can be iterated over only once. After that, it becomes invalid.

std::ranges::forward_range
    Subsumes std::ranges::input_range. A range that can be iterated over multiple times. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is a forward iterator. std::forward_list and std::list are examples of a forward range. It can be iterated over multiple times.

std::ranges::bidirectional_range
    Subsumes std::ranges::forward_range. A range that can be iterated over in both directions. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is a bidirectional iterator. std::list and std::deque are examples of a bidirectional range. It can be iterated over in both directions.

std::ranges::random_access_range
    Subsumes std::ranges::bidirectional_range. A range that can be iterated over in both directions and can be accessed randomly. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is a random access iterator. std::vector, std::deque and std::array are examples of a random access range. It can be iterated over in both directions and can be accessed randomly.

std::ranges::contiguous_range
    Subsumes std::ranges::random_access_range. A range that can be iterated over in both directions and can be accessed randomly. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is a contiguous iterator. std::array and std::vector are examples of a contiguous range. It can be iterated over in both directions and can be accessed randomly.

std::ranges::sized_range
    Subsumes std::ranges::range. A range that has a size() function. It is a range object that has a size() function. std::vector, std::deque and std::array are examples of a sized range. It has a size() function.

std::ranges::output_range
    Subsumes std::ranges::range. A range that can be written to. It has begin() and end() functions, but not cbegin() and cend() functions. It is a range object that is an output iterator. std::ostream_iterator is an example of an output range. It can be written to.

std::ranges::view
    Subsumes std::ranges::range. A range that is a view of another range. It has begin() and end() functions, but not cbegin() and cend() functions. std::string_view and std::span are examples of a view. It is a view of another range. It is cheap to copy, move and assign.

std::ranges::borrowed_range<Rg>
    Guarantees that the passed range Rg in the current context yields iterators that can be used even when the range no longer exists. The concept is satisfied if an lvalue is passed or the passed range is always a borrowed range.
    • If the concept is satisfied, iterators of the range are not tied to the lifetime of the range. This means that iterators cannot dangle when the range they were created from is destroyed. However, they can still dangle if the iterators of the range refer to an underlying range and the underlying range is no longer there.
    • Formally, the concept is met if Rg is an lvalue (such as an object with a name) or if the variable template std::ranges::enable_borrowed_range<Rg> is true, which is the case for the following views:
    subrange, ref_view, string_view, span, iota_view, and empty_view.
    • Requires:
    – std::range<Rg> is satisfied
    – Rg is an lvalue or enable_borrowed_range<Rg> yields true