In an array find two indexes such that their difference in maximum.
Also the lower value should be before the higher value.

This same problem can be asked in a different way.
Given a stock price over n days, find when you should buy and when you should sell to make maximum profit.
Short selling is not allowed.

Eg:
{100, 180, 260, 310, 40, 535, 695}

Solution: Simple O(n) solution, traverse once. Assume arr[0] is the minimum. Compare with arr[1].
if positive, remember it. If less, store arr[1] as the new minimum.

std_pair<int, int> maxProfit(int arr[], int size)
{
    int min_index = 0; int max_index = 0;
    int minimum = arr[0]; int maxProfit = 0;
	for(int i = 1; i < size; ++i)
	{
	    if((arr[i] - minimum) > maxProfit) {
		    max_index = i;
		    maxProfit = arr[i] - minimum;
		}
		if (arr[i] < minimum) {
		    minimum = arr[i];
			min_index = i;
		}
	}
	return std::make_pair(min_index, max_index);
}

Another solution:
First find the difference between the adjacent elements of the array and store all differences in an auxiliary array diff[] of size n-1. Now this problems turns into finding the maximum sum subarray of this difference array.

-----------------------------------------------------------------
Variation: You can buy/sell multiple times.
{100, 180, 260, 310, 40, 535, 695}

Solution: All you have to do is find all the increasing sequences. and sum them up.
How can you do this??
1) First find a local minima. Store it as the starting index.
2) Next find a local maxima. Store it as the ending index.
   sum = sum + arr[starting_index..ending_index-1];
3) Repeat again starting from ending_index. until you reach end.
For the example above you will get.
Eg: {100, 310}, then (40, 695}
