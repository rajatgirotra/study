io_service::strand class

A strand is basically used to guarantee that all event handlers (CompletionHandlers) will be executed sequenentially.
There are many ways to accomplish this.

1) The application ensures that it only calls the run() method from one thread. Then all CompletionHandlers will be
automatically sequential.
2) Some applications like HTTP hald duplex (where only one can read and other end can write) are implicitly strands
3) The boost asio library provides a nested class io_service::strand to force this.

How?
You create an instance of the strand class passing the io_service object
//C'tor
strand(boost::asio::io_service& io_service);

//the application must use the strand::wrap() function which wraps the CompletionHandler and later
will dispatch the wrapped handler on the strand.

//Also application should not directly use the dispatch/post functions of the io_service object.
It should use dispatch/post functions of the strand object which will correctly dispatch it to the
io_service object sequentially.

So following are the three important strand functions

wrap()
dispatch()
post()

//header file: boost/asio/strand.hpp
