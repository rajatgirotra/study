Buffers

Normally, I/O of data takes place from a contiguous piece of memory. You already have read about read/write API's
which read or write a contiguous array of bytes. ASIO however, provides support for reading/writing from multiple
buffers

1) Scatter-read: Ie. reading data in mutiple buffers
2) Gather-write: ie. writing data from multiple buffers.

Each buffer is nothing but a pair of a pointer and the size.
std::pair < void* , size_t> buffer.

ASIO has defined encapsulation of buffer classes.
We have

1) mutable_buffer: std::pair<void*, std::size_t>
2) const_buffer: std::pair<const void*, std::size_t>

Obviously mutable_buffer can be converted to const_bufferbut reverse is not possible.

So in order to use read() and write() API's of ASIO, you can store these buffers into a sequence (container)
and then pass it to those API's. Also there are helper iterators defined to traverse the buffers in a sequence.
You'll see later how.

Header file: boost/asio/buffer.hpp

//C'tors
mutable_buffer() //empty buffer
mutable_buffer(void* data, size_t size)

//Very simple, returns a new buffer where the new pointer is current_pointer+start.
mutable_buffer operator+(const mutable_buffer& b, size_t start);
mutable_buffer operator+(size_t start, const mutable_buffer& b);

Ditto for const_buffer

Also to access the raw pointer and size of the buffer, always use.
buffer_size() and buffer_cast() member functions.

boost::asio::mutable_buffer b1 = ...;
size_t size = boost::asio::buffer_size(b1);
unsigned char* p1 = boost::asio::buffer_cast<unsigned char*>(b1);

