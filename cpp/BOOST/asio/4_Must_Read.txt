As best practice, always enclose io_service::run() in a try catch block

boost::asio::io_service io_service;
for(;;) {
  try {
    io_service.run();
    break; //run exited normally
  }catch(const some_exception& e) {
      //Handle exception here
  }
  //run() wll be called again; which is OK.
  //No need to call reset() after an exception occurs in run().
}


Ideally you can also call run() before any asynchronous operation. But in those cases, run() will immediately
return as there is no pending operations. To prevent this from happening, you can create a io_service::work
object.
boost::asio::io_service io_service;
boost::asio::io_service::work work(io_service)

Make sure the lifetime of the work object outlives the lifetime of the io_service object.
When work object gets destroyed, run() method will run gracefully, ie will keep blocking if there
are pending dispatches to be done.

However, if you call stop(), run() will return immediately, no pending/ready handlers will be dispatched.
