std::hash --> is very trivial. is a template class defined as

namespace std {

template <typename Key>
struct hash {}; // empty class

}

Now the standard creates many specializations of this template for many different types like
1) bool
2) int
3) short
4) long
5) char
6) enums
7) unique_ptr
8) uint8_t, int8_t etc etc.
etc etc (it created specialization for signed and unsigned versions)

If you want to create an unordered_map where the Key is some user defined type XYZ, then you need to create a specialization
for std::hash for type XYZ. The specialization is created by making std::hash<XYZ> a function object, which returns std::size_t
and takes as argument a "const XYZ&" and does not throw. If you provide a specialization, without overloading the function call
operator, we say the std::hash<XYZ> is poisoned.

read hash_map.cpp next