understanding execution policies
================================

std::execution::seq just means that all elements of the container will be processed in sequence.

std::execution::par means that the STL implementation will use separate threads to process every element. If you have 8 cores
and 100 elements, the STL implementation might use a thread pool will 8 worker threads to process 8 elements in 8 threads at one time.

std::execution::par_unseq means that more than elements may be processed in one or more threads at the same time and may also
use vectorization i.e. SIMD instructions.


limitations with using std::execution::par
=========================================
with std::par if you want to modify a shared resource you need to use some synchronisation mechanism to prevent data races and deadlocks:

std::vector<int> vec(1000);
std::iota(vec.begin(), vec.end(), 0); // fills vector with 0, 1, 2, 3, 4, ... , 999
std::vector<int> output;
std::mutex m;
std::for_each(std::execution::par, vec.begin(), vec.end(), [&output, &m](int& elem) {
  if (elem % 2 == 0) {
  std::lock_guard guard(m); // if we don't use mutex, data race may occur.
  output.push_back(elem);
  }
});

With par_unseq function invocations might be interleaved, so it’s forbidden to use unsafe vectorised code. For example,
using mutexes or memory allocation might lead to data races and deadlocks. Why?? because it's the same thread which will try to acquire
the thread twice. Example:

std::vector<int> vec = GenerateData();
std::mutex m;
int x = 0;
std::for_each(std::execution::par_unseq, vec.begin(), vec.end(), [&m, &x](int& elem) {
  std::lock_guard guard(m);
  elem = x;
  x++; // increment a shared value thinking it is safe to do so.
});

Since the instructions might be interleaved on one thread, you may end up with the following sequence of actions:
std::lock_guard guard(m) // for i-th element
std::lock_guard guard(m) // for i+1-th element
...
As you can see, two locks (in the same mutex) will happen on a single thread causing a deadlock!

Exceptions
When using execution policies, you need to be prepared for two kinds of situations.
• the scheduler, or the implementation fails to allocate resources for the invocation -
  then std::bad_alloc is thrown.

• an exception is thrown from the user code (a functor) - in that case, the exception is
  not re-thrown, std::terminate() is called.
