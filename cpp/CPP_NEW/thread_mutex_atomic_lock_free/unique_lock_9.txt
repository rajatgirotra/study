/*
Unique_lock is a general purpose mutex wrapper for wrapping any type of mutex. It holds:

1) a pointer to the underlying mutex, instead of a reference to it like lock_guard.
2) a bool (m_owns) that tells if this unique_lock<> object owns(ie has locked) the mutex.

Since it holds a pointer to the mutex, it is movable, not copyable.

Ctor:
template <typename Mutex>
struct unique_lock {
   Mutex* mtx;
   bool owns;
   std::unique_lock() : mtx(nullptr), owns(false) {}
   std::unique_lock(Mutex& p_mtx) : mtx(&p_mtx), owns(false) {
       lock();
       owns = true;
   }
   std::unique_lock(Mutex& p_mtx, std::adopt_lock_t) : mtx(&p_mtx), owns(true) {}
   std::unique_lock(Mutex& p_mtx, std::defer_lock_t) : mtx(&p_mtx), owns(false) {}
   std::unique_lock(Mutex& p_mtx, std::try_to_lock_t) : mtx(&p_mtx), owns(mtx->try_lock()) {}

   // bool owns_lock();
   // movable c'tor
   // Mutex* release();
   // lock();
   // try_lock();
   // try_lock_for();
   // try_lock_until();
   // unlock();
   // swap(); swaps the state of this object with the passed argument
};

*/
