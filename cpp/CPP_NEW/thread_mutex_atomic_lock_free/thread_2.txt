/*
Very simple c'tors

thread() - Default ctor. State is NOT A THREAD
thread(thread&& other) - Move ctor
template <typename Callable, typename... Args>
thread(Callable f, Args... args) --> Start a thread by calling function f with arguments args.

By default, the return type of the thread function is ignored. Use std::promise if you are interested in the thread function return value.
If a thread throws an exception, std::terminate is called.

thread has a nested class id. (std::thread::id) This class is used to get an id of a thread. The important use of this class is to use it in
associative containers as key. Other important functions are.

joinable() --> is the thread joinable
join() --> will block for the thread to finish
detach() --> detach() the thread so it is not joinable. The state of the thread object becomes NOT A THREAD
swap() --> swap() two thread objects
get_id() --> get the std::thread::id object of this thread. Can be passed to cout which will give you the thread id.

std::thread t1(foo);
auto t1_id = t1.get_id();
cout << t1_id << endl; // might output 0x35a7210f

We also have a namespace std::this_thread which has functions which act on the calling thread. Example

std::this_thread::get_id() --> returns the id of the calling thread.
std::this_thread::yield() --> is just a hint to the OS to reschedule other threads.
std::this_thread::sleep_for(std::chrono::duration)
std::this_thread::sleep_until(std::chrono::time_point)

thread ctor might throw exception std::system_error if the thread could not be started. The exception may represent the error
condition std::errc::resource_unavailable_try_again or another implementation-specific error condition

*/
