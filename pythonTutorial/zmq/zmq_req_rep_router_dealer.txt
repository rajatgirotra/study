How REQ-REP ROUTER-DEALER works internally.

For REQ-REP
1) ZMQ internally creates multipart messages. A multipart message has a REPLY ENVELOPE followed by the actual
data that the client sends. The reply envelope and data are separated by an empty frame (which acts like a
delimiter). There could be more than one reply address frames as we'll see.
2) For the simplest case of REQ-REP, there is zero reply address frame, just one empty delimiter frame followed
by the data frames. You really don't need reply address here as there is only one connection.

You need one or more reply address frames in ROUTER-DEALER messaging as explained next.
How ROUTER sockets work:

When receiving messages a ZMQ_ROUTER socket prepends a message part (frame) containing the identity of
the originating peer to the message before passing it to the application. Basically ROUTER socket always knows
the identity of the application sending messages to it, so it creates a random string and uses it as a unique
identifier for that client. Messages received are fair-queued from among all connected peers.
The ROUTER socket invents a random identity for each connection with which it works. If there are three
REQ sockets connected to a ROUTER socket, it will invent three random identities, one for each REQ socket.
Internally, this means the ROUTER socket keeps a hash table where it can search for "ABC" and find the TCP
connection for the REQ socket.

When sending messages out, ZMQ_ROUTER socket shall remove the first part of the message and use it to
determine the identity of the peer the message shall be routed to.


Legal and Illegal REQ-REP-ROUTER-DEALER connections:
These are the legal combinations:

REQ to REP --> Trivial
DEALER to REP --> OK
REQ to ROUTER --> OK
DEALER to ROUTER  --> OK
DEALER to DEALER -->
ROUTER to ROUTER -->
And these combinations are invalid (and I'll explain why):

REQ to REQ --> OK
REQ to DEALER --> OK
REP to REP --> OK
REP to ROUTER -->


Here are some tips for remembering the semantics.
DEALER is like an asynchronous REQ socket, and ROUTER is like an asynchronous REP socket.
Where we use a REQ socket, we can use a DEALER; we just have to read and write the envelope
ourselves. Where we use a REP socket, we can stick a ROUTER; we just need to manage the
identities ourselves.

