What is Ethereum?

You already know that the whole Blockchain can be divided into 3 layers
1) Technology (how the blocks in the blockchain are tied cryptographically)
2) The coin (the BTC transactions, scriptSig and scriptPubKeyScript)
3) The tokens.

Now Bitcoin was always designed as a replacement for a central physical currency. It was never designed to be a framework to support digital tokens.
Ethereum on the otherhand wants to create the largest distributed computer in the world. But how does it do that?
You already know that Bitcoin has a scripting language. However it is not turing complete. What that means is that it doesnt support loops and other features to be called a full programming language. Ethereum on the other hand uses Solidity which is turing complete programming language. 
So now in Bitcoin, you have transactions which is just data, but in Ethereum you have transactions + code. this code is written in solidity and its called a smart contract.
and this code can be run on all the nodes connected in the Ethereum blockchain. The results/state after the code is run can be recorded immutably on the Ethereum blockchain.
and that's what makes Ethereum so special.

Example 1
==========
Lets take the example of a Mona Lisa painting. What can you do with it?
1) Take pictures of it
2) Be around it
3) Talk about it?
All these things are called interactions. These become the functions in a smart contract which can act on the data in the contract.

Example 2
==========
A second example:
- Mom is going to London for a few works for office work
- She wans to send yoy 50$ weekly
- you dont have a bank account
- She sends 50$ to your older sister instead
- Your sister is not trustworthy.

In this case, we can create a Smart Contract with:
- data
   Amount
   Date
- functions (interactions)
     change_amount_date()
	 check_amount_data()

Let's try to go to remix.ethereum.org and try to create a smart contract NotifyMySon
/ SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 */
contract NotifyMySon {

    uint amount;
    string date;

    function changeAmountAndDate(uint newAmount, string memory newDate) public  {
        amount = newAmount;
        date = newDate;
    }

    function checkAmountAndDate() public view returns (uint, string memory) {
        return (amount, date);
    }
}

Example 3
=========
- Jane is Sarah's mother and setsup a piggy bank for Sarah.
- Anyone can deposit
- Only Sarah can withdraw.

To withdraw/deposit, we will need Ether. To represent values less than 1 Ether, we have another denominations.
1 Ether = 10^18 Wei (Wei is the smallest unit of Ether)
1 Shannon = 10^9 Wei
1 Finney = 10^15 Wei

SmartContract
- data
    Balance
	Sarah's ID (as only Sarah can withdraw)
	Janes' ID (as she initially setup everything for Sarah)
- function
     balance()
	 withdraw()
	 deposit()

pragma solidity >=0.7.0 <0.9.0;

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 */
contract PiggyBank {
    function getBalance() public view returns(uint) {
       return address(this).balance;
    }
	
	function deposit(uint amount) payable {
	   require(amount == msg.value);
	}
}

// So when you compile a smart contract, you get a unique address. This address will be unique and different everytime you compile a smart contract.
// and solidity provides a cleaner way to get the address of the smart contract using "address(this)" and .balance returns the balance in the smart contract.
// a function that takes some Ether/wei must be declared payable. and we validate that the function must specify the same argument to deposit() function as much ether/wei he/she is paying through the UI.
// If anything fails in a smart contract, it is reverted to its original state.

Decentralized App
=================
A Dapp is just an API (frontend) to interact with Smart Contracts on the blockchain. Google Steemit.
Steemit is a social media platform where everyone gets paid for creating and curating content. It leverages a robust digital points system (Steem) for digital rewards.
It is a decentralized blogging platform built on the Steem blockchain.

Ethereum Virtual Machine (EVM) & Gas
====================================
Ethereum is really a blockchain which has its own Cryptocurrency called Ether and it consists of smart contracts. These smart contracts are nothing but code that is distributed to all the nodes on the network. EVM and Gas concepts were introduced as a measure of security.
You know already why Bitcoin doesnt support loops. It's because anyone can put a malicious loop (a long computational loop, an infinite loop etc) and make the blockchain slow.
But Ethereum supports it.. How?? and Since Ethereum has smart contracts or code distributed to all nodes on the network, how convenient is it for a virus to spread. To help with this EVM and Gas were introduced.

1) EVM --> The solidity language always runs inside a Ethereum Virtual Machine. That means it doesnt know anything about the host system, environment etc. There is 100% gaurantee that whatever you do inside an EVM stays there. So your system and its file are completely safe. EVM has its own microkernel, memory, storage, stack space etc.

2) Loops --> Ethereum blockchain requires that anyone who wants to execute code in a smart contract must pay. This payment must be done in Ether. So if anyone writes ineffecient code or write long computational/infinite loops, it will cost them a lot of Ether, so they will not do that, as soon they will run out of Ether.
However the price of Ether can fluctaute everyday based on market, so they introduced something calles as Gas. They created a spreadsheet and provided the number of "Gas" units you need all primitive operations (like ADD, MULTIPLY, DIVIDE, BITWISE OPS etc etc) and their corresponding Gas units required. This Gas units are mostly constent. And to convert between Ether and Gas, they have their own Exchange Rate. This Exchange Rate is modified based on Consensus, so that the Gas prices remain largely unchanged.
You can go to ethergasstation.info/ for more information.

Decentralized Autonomous Organizations (DAO's)
==============================================
What are organizations in general.?? Just people at different levels doing work and following some procedures/rules to finish work.
Their contract specifies what is their work and what procedure/rules to follow. 
So now we can code all these protocol/rules in a smart contract. Example
1) Ride Hailing..
2) A company which provides a computational service to its customers.
Read article DAO, DACs' DA's and More by Vitalik

The DAO attack 
==============
Vitalik created the first DAO (really called "THE DAO") to start a crowd funded venture capital fund where people could invest their money. It was Stateless
and by the time the fund raising was over, they accumulated 150mio. However due to a bug in how the SmartContract was written, a hacker came along and exploited the bug and moved 50mio to his own account. However due to a fail safe mechanism, the money could not be transferred directly to a bank account and the community got some 30 days to think what to do.
So at that time, the Ethereum block chain itself was hard forked into 2. One was called Ethereum (ETH) and the other Ethereum classic (ETC). on ETH, the transaction was reversed and the money returned to the owners, but on ETC the hacker walked away with $67mio dollars. 
google and read "The Ether Theif" on bloomberg.

Soft and Hard Forks
===================
Forks means forking of the blockchain software (like in github).

Forks are of two kinds:
Hard Fork --> Generally loosen up some rules
Soft Fork --> Generally tightens rules

Hard forks means that after the fork, the blockchains will grow independently. They will still share the chain before the fork. A fork could happen due to various reasons.

Bitcoin fork
============
First fork was a soft fork in July 2017 when SegWit txs were introduced. That was a soft fork so the blockchain was not forked (i.e a software upgrade was made and eventually everyone has to update their softwares in time).

But some people were unhappy with this SeqWit introduction; they wanted the block size to be increased instead. so at block 478558 in Aug 2017, the hard fork happened and BitcoinCash was introduced. The block size of BitcoinCash is 8MB.

The next hard fork in Bitcoin happened in Oct 2017 when ASIC's were introduced. Some people were unhappy and wanted to continue with GPU mining so a hard forked happened at block 491407 and Bitcoin Gold was formed.

Ethereum Fork
=============
Ethereum also forked into Ethereum Classic due to the DAO attack in July 2016 on block number 1919999.

The MOST INTERESTING PART OF FORKING
====================================
Let say you owned 1 BTC in 2016. BTC got forked in Aug 2017 to BitCoin Cash. So now you have two different Blockchains. Fork here means the github code was forked. and in case of Bitcoin Cash the block size was changed to 8MB. So now what?? Can i transact on BitCoin Cash network?? Yes I can because that network also has the same blockchain before the fork. So my 1 BTC should be valid there also. So basically you now hold both 1 BTC and 1 BITCOIN CASH. Similarly when another fork happened in 2017 due to ASIC, i would have 1 BTC, 1 BitcoinCash and 1 Bitcoin Gold.

Initial Coin Offerings (ICO's)
===============================
ICO's can happen at two layers
1) Token Layer
2) Protocol/Coin layer

Ether nodes
===========
Just like full nodes in Bitcoin, you have Ether nodes in ethereum. anyone can run an ethereum node. Every ethereum node runs an ethereum client such as geth (go-eth) See ethernodes.org/ for a distribution of running ether nodes by country, operating system and the eth client. (goeth, openethereum etc). There are other ways of interacting with a eth nodes.

web3.js
-------
collection of libraries used to interact with eth network using Http, IPC, websockets. Written in JS developed by ethereum team.

Wallet
------
Eg. MetaMask

types of Nodes
--------------
Full nodes: Which have a copy of the blockchain and run validations on the blocks.

Light Nodes: 
-----------
Suitable when devices cannot store GB's of blockchain. They only contain header information of the blocks and can request and validate that the header is all correct.

archive node:
-------------


There are also new Eth clients for ETH2.0 that run the Beacon and the Shard Chains and support the new Proof-of-Stake consensus mechanism.
There are many different Ethereum Networks: Mainnet, Testnets(Rinkeby, Kovan), Private Ethereum Blockchains.

Ethereum Accounts
-----------------
in ethereum you can have two kinds of accounts.
1) EOA (Externally Owned Accounts)
   a) These are accounts owned by human.
   b) Backed by private/public keys
   c) Can be used to send, receive, and hold Ether and to interact with smart contracts.
   d) This type of account has no associated code.
   e) Have a unique addeess
   f) They can initiate transactions.

2) Contract Accounts (CA)
   a) These are created by contract code
   b) No associated public/private keys
   c) Have a unique address
   d) It has associated code and creating a Contract Account will cost you Gas. The code is the immutable EVM bytecode.
   e) It can also send, receive and hold Ether
   f) the code execution is triggered by receiving a transaction from another CA or EOA.
   g) CA cannot initiate transaction. They can only send messages to other contracts.

Components of an Ethereum Account
=================================
Nonce --> counter that indicates the number of transactions sent from the account(it ensures that the same transaction isnt submitted twice)
Balance (in wei)
Account Address
Account Keys (for EOA)
Code (for CA): The immutable EVM bytecode
Storage (for CA)

Address Generation in Ethereum
===============================
EOA 
1) Generate a private key (256 bits)
2) Take the last 20 bytes (160 bits) of the corresponding public key
3) Apply Keccak-256 hash.

CA
1) Calculated deterministically from the address of the creater(sender) and how many transactions the creatore has sent(nonce)

MetaMask
========
Is a CryptoWallet which is a browser extension. For ethereum, it actually talks to another eth client which talks to the full node. You can setup a new account in eth mainnet or test nets and also import accounts if you have private keys. It supports recovery based on Seeds (BIP39, BIP44).
You can buy,sell and hold ETH. you can also exchange tokens. MetaMask also acts as crypto exchange aggregator to get us the best price

MEW
===


Rinkeby Authenticated Faucet
=============================
Now most of the time, developers will test the smart contracts on ethereum's test nets. But you might want some balance in your account in the test nets. You can get that from these web apps like faucet.rinkeby.io. Just authenticate yourself and send yourself some fake ETH's. That's it. too simple. 

For authentication, just create a new tweet with your Eth address and copy the tweet URL and paste in the web app below.

Gas
===
Gas measure the amount of computational effort required to execute a transaction on the blockchain. The sender/initiator of the transaction must pay for the Gas.
Each operation like Addition/Subtraction/etc has an associated OPCODE and a Gas Unit needed to run the OPCODE operation.
When you send ETH to someone for example, some wallets do an estimation of the gas fees that should be paid based on the network traffic and transaction complexity.
However you can also manually change the gas fees payable. The following gas options are available in MetaMask

GasLimit: This represents the maximum Gas Units you are willing to spend for your transaction.
Max Priority Fee: An amount in gwei that you want to pay to the miner for prioritizing your transaction. this fee goes directly to the miner
Max Fee: This is the max you will pay (some of base fee + priority fee)
the base fee get burnt.

etherscan.io/ or rinkeby.etherscan.io/

ETH requires atleast 12 confirmations as opposed to Bitcoin which requires 6 confirmations.
ETH can process 15 txns per sec, but ETH 2.0 can process 100,000 txns/sec.
ETH block is mined every 20 seconds.

ETH Transaction Fields
=======================
from address
signature of sender 
to address
value --> can be zero
gasLimit --> Max amt of gas units that can be consumed. For xfer txns, it is 21000, if a txn consumes less than gasLimit, the remaining gas units is refunded to the sender.
gasPrice --> in gwei
nonce: txn nonce, the count of the number of txnx initiated by the sending address. Different from Block nonce.
data: --> Required when a CA is deployed. Will contain EVM bytecode, or arguments of function that is called.
hash: The hash of the transaction

Difference between Txn and Call on Ethereum
===========================================
1) Txn will mofify the blockchain, a Call like getBalance() will not modify the blockchain
2) Txn Will cost gas, call's are free
3) Txns must be mined (which takes time), Call's dont have to mined, they execute instantly
4) Txns returns a txn id hash, Calls will return a value
 
 
ETH2 is also called Serenity
Major upgrades:
1) POS vs POW
2) Sharding

How POS works
==============
Miners are called Validators.
To become a validator, you have to stake or lock an amount of ETH in a smart contract. Right now the validator software is activated if you stake 32 ETH.
High perforamce hardware is not required to become a validator
Rewards are given to validators because that's what keeps the chain running securely. The more ETH you stake, the more blocks you can validate.
A validator can loose ETH if he does bad things (going offline, faking txns, failing to validate etc)
To conduct a 51% attack, a validator need to stake 51% of the staked ETH.

So instead of joining a Mining pool, lets join a staking pool.

ETH2 Sharding and Beacon Chain
------------------------------
in ETH2, the plan is to have separate chains called shards. initially there will be 64 of them. This is done for scalability; as this allows to spread the networks load.
Each node will only need to run a single shard. so the node doesnt need to have expensive hardware. So having inexpensive nodes means having more network participants and that means more security.
Initially shared chains will only have "Extra Data" (i.e the contracts EVM byte code, the function arguments etc). It wont be able to handle
transactions or smart contracts. But then how can you improve Scalibility if Shards cannot handle transactions and smart contracts.
That is because of Layer 2 scaling in particluar rollups. Rollups means bundling up transactions of chains generating a cryptographic proof and submitting to the chain which requires only data shards to be available.
Also in the data sharding model, the current Ethereum block chain becomes one of the shards; and thus will be the only shard to handle transactions and smart contracts.

The Beacon chain is used for co-ordinating a POS based system by randomly assigning validators to validate different shards.
Once live, the validators will be validating the current Beacon chain and not the Ethereum mainnet. The mainnet blockchain can be validated once the mainnet becomes one of the ETH2 shards.
When the current Ethereum mainnet becomes one of the ETH2 shards, it is called Docking and it will mark the end of the current POW and the full transition to ETH2 will be complete.

time lines
Phase 0 --> Starting the beacon chain. Already launched on 1st Dec 2020
Phase 1 --> Data Sharding
Phase 1.5 --> Docking
Phase 2 --> 

Remix IDE
=========
Remix IDE is written in Javascript. The solidity code is also compiled using Javascript. You can use the online version of the IDE 
as it is available straight out of the box.  It is a javascript based IDE for creating/deploying/running smart contracts. The IDE has a solidity compiler (written iin javascript). There are other compilers also available for solidity like solc (written in c++) and others. When solidity code is compiled, the output is an EVM bytecode and an ABI. the EVM bytecode is what actually gets deployed on the blockchain as a smart contract, and the ABI tells the variables, functions, function arguments and its types that the smart contract supports.

Remix IDE also supports smart contract deployment. There are 3 possible ways.
1) Javascript VM --> to deploy to an internal dummy blockchain inside the IDE itself.
2) Injected Web3 --> Remix will connect to an external Web3 provider such as MetaMask which will internally connect to an Ethereum node on the mainnet or testnet.
3) Web3 provider --> Remix will connect to a return node using a URL and an ethereum client such as geth.

Solidity
========
Must start with the SPDX license identifier string, followed by pragma for which solidity compiler version to use. Example:

//SPDX-License-Identifier: GPL-3.0
 
pragma solidity >=0.5.0 <0.9.0;  // compiler version should be greater than 0.5.0 and less than 0.9.0
 
contract Property {
    // declaring state variables saved in contract's storage
    uint price; // by default is private
    string public location;  // both location and price state variables will be stored in the smart contract on the blockchain
    
    // can be initialized at declaration or in the constructor only
    address immutable public owner;  // immutable means value must be assigned in constructor and will not change after that
    
    // declaring a constant
    int constant area = 100; // must initialize with declaration and cannot change.
    
    // declaring the constructor
    // is executed only once at contract's deployment
    constructor(uint _price, string memory _location){
        price = _price;
        location = _location;
        owner = msg.sender;  // initializing owner to the account's address that deploys the contract
        /*
          each transaction get a special global variable "msg" which has many members. msg.sender is the initiator of the transaction. 
        */
    }
    
    
    // getter function, returns a state variable
    // a function declared `view` does not alter the blockchain 
    function getPrice() public view returns(uint){ // view means the function reads the blockchain, but does not alter it.
        return price;  // since this function doesnt alter the blockchain, it does not consume any gas.
    }
    
    // setter function, sets a state variable
    function setPrice(uint _price) public{ // this function will consume gas.
        int a; // local variable saved on stack
        a = 10;
        price = _price;
    }
   
    // string, array, member and reference types are by default stored in the smart contract. So we use "memory" to specify that we dont want to store them in the contract, rather on the heap. 
    function setLocation(string memory _location) public{ //string types must be declared memory or storage
        location = _location;
    }
    
}
=====================================================================================================================
before solidity compiler 0.4.0, arithmetic operations could lead to underflow and overflows. To prevent this, developers used a SafeMath library. But beginning with solidity 0.8.0, all arithmetic operations and checked with overflow/underflow at runtime and any overflows/underflows will result in a failed transaction. However, if you want old behavior (you really shouldnt do it), you can wrap the arithmetic operation in an unchecked block.

unchecked { x += 1; }
=====================================================================================================================
